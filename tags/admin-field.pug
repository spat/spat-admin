admin-field-text
  div.fs11.bold.text-gray.mb8(if='{opts.field.label}') {opts.field.label}
  input.input.w-full(ref='input', type='text', value='{opts.riotValue.toString()}', required='{opts.field.options.required}', readonly='{opts.field.options.readonly}', class='{"bg-whitesmoke border-transparent": opts.field.options.readonly}')

  style(type='less').
    :scope {
      display: block;
    }
  
  script.
    this.getValue = () => {
      var value = this.refs.input.value;
      if (Array.isArray(opts.riotValue)) {
        return value.split(',').map(s => s.trim());
      }
      else {
        return value;
      }

      // TODO: 関数挟めるようにするかも
      //- if (opts.field.options && opts.field.options.getValue) {
      //-   return opts.field.options.getValue({
      //-     tag: this,
      //-     field: this.opts.field,
      //-     item: this.opts.item,
      //-     value: this.refs.input.value,
      //-   });
      //- }
    };

admin-field-textarea
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  div
    div.border-top.border-right.border-left.p8(if='{opts.field.options.shortcode}')
      button.px8.py6.button.mr4(type='button', each='{shortcode in app.admin.shortcodes.list}', onclick='{onInsertText}') {shortcode.label}
    textarea.input.w-full.lh15(ref='input', rows='{opts.field.rows || 4}', readonly='{opts.field.options.readonly}', class='{"bg-whitesmoke border-transparent": opts.field.options.readonly}') {opts.riotValue}

  style(type='less').
    :scope {
      display: block;
    }
  
  script.
    this.on('mount', () => {
      this.refs.input.ondragover = (e) => { return false; };
      this.refs.input.ondrop = async (e) => {
        e.preventDefault();

        var i = spat.modal.indicator();

        // ファイルをすべてアップロードして url を取得
        var files = Array.from(e.dataTransfer.files);
        var promises = files.map(async file => {
          let url = await app.admin.utils.uploadFile(file);

          url += '?auto=format';

          return url;
        });
        var urls = await Promise.all(promises);

        // markdown 形式に変換してつなげる
        var images_text = urls.map(url => `![](${url})`).join('\n');

        // textarea に追加
        this.insertText(images_text);

        i.close();
      };
    });

    this.onInsertText = async (e) => {
      var shortcode = e.item.shortcode;
      var onclick = shortcode.onclick;
      var text = '';

      // onclick があったらそっちを優先する
      if (onclick) {
        // 文字列だった場合は admin.utils から引っ張ってくる
        if (typeof onclick === 'string') {
          onclick = app.admin.shortcodes[onclick];
        }
        text = await onclick();
      }
      else {
        var ta = this.refs.input;
        ta.focus();

        // 選択している部分のテキストを取得
        var selectedValue = ta.value.substring(ta.selectionStart, ta.selectionEnd);
        text = shortcode.prefix + selectedValue + shortcode.postfix;
      }

      if (text) {
        this.insertText(text);
      }
    };

    this.insertText = (text) => {
      let input = this.refs.input;
      let cursorPosition = input.selectionStart;

      let before = input.value.substr(0, cursorPosition);
      let after = input.value.substr(cursorPosition);

      input.value = before + text + after;

      input.selectionStart = input.selectionEnd = cursorPosition + text.length;
    };

    this.getValue = () => {
      return this.refs.input.value;
    };

admin-field-date
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  input.input.w-full(ref='datetimepicker', required='{opts.field.options.required}', placeholder='{opts.field.options.placeholder}', readonly='{opts.field.options.readonly}', tabindex='{opts.field.options.readonly ? -1 : 0}', class='{"bg-whitesmoke border-transparent pointer-none": opts.field.options.readonly}')

  style(type='less').
    :scope {
      display: block;
    }
  
  script.

    this.on('mount', () => {
      $(this.refs.datetimepicker).datetimepicker({});

      if (this.opts.riotValue) {
        var format = opts.field.options.format || 'YYYY/MM/DD HH:mm';
        this.refs.datetimepicker.value = dayjs(this.opts.riotValue).format(format);
      }

      this.update();
    });

    this.getValue = () => {
      var datetime = dayjs(this.refs.datetimepicker.value.valueOf());
      //- 何も入力していなければNaNになるので値を0にする
      return +datetime || 0;
    };

// TODO:
admin-field-markdown
  div markdown

  style(type='less').
    :scope {
      display: block;
    }

admin-field-select
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  select.select.px16.py12.pr40(ref='input', required='{opts.field.options.required}')
    option(each='{choice in choices}', value='{choice.value}') {choice.label || choice.value}

  style(type='less').
    :scope {
      display: block;
    }

  script.
    this.on('mount', async () => {
      var choices = opts.field.options.choices;
      if (typeof choices === 'function') {
        choices = choices();
        if (choices instanceof Promise) {
          choices = await choices;
        }
      }
      this.update({choices});

      this.refs.input.value = this.opts.riotValue;
    });
    this.getValue = () => {
      return this.refs.input.value;
    };

admin-field-switch
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  //- div (スイッチフォーム)
  div.relative.switch.cursor-pointer.s-full.rounded-full.transition.f.fm.border(class='{"bg-primary checked": checked}', onclick='{toggle}')
    //- ○
    div.inner-button.flex-fixed.relative.ml3

  style(scoped, type='less').
    //- ボタンの大きさ指定の変数
    @width: 50px;
    @height: 27px;
    @border-width: 1px;
    @inner-button-size: 20px;
    //- 横幅からinner-buttonの高さを引いた分だけ動かすと綺麗に収まる
    :scope {
      display: block;
      
      .switch {
        width: @width;
        height: @height;
        cursor: pointer;
        -webkit-user-select: none;
        user-select: none;
        border-width: @border-width;

        &.checked {
          .inner-button {
            transform: translateX(@inner-button-size + 3);
          }
        }
      }
      //- switchのまるの部分
      .inner-button {
        width: @inner-button-size;
        height: @inner-button-size;
        transform: translateX(-@border-width);
        background-color: lightgray;
        border-radius: 50%;
        transition: 256ms;
      }
    }
  script.

    this.on('mount', () => {
      this.checked = this.opts.riotValue;
      this.update();
    });

    this.getValue = () => {
      return this.checked;
    };

    this.toggle = (e) => {
      this.checked = !this.checked;
    };

admin-field-image
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  div.f.fh.bg-gray_pale.relative.w-full.h-auto.max-width-500.min-height-200.cursor-pointer.mb4(onclick='{onSelectImage}')
    img.s-full.object-fit-contain.border(if="{url || opts.riotValue}", src='{url || opts.riotValue}')
    div.absolute.trbl0.s-full.f.fh.fs26 +
  div.fs10.mb16(if='{!opts.field.options}') クリック または ドラッグ&ドロップで追加できます
  
  style(type='less').
    :scope {
      display: block;
      .max-width-500 {
        max-width: 500px;
      }
      .min-height-200 {
        min-height: 200px;
      }
    }

  script.
    this.on('mount', () => {
      this.input = document.createElement('input');
      this.input.type = 'file';
      this.input.accept = 'image/*';
      
      //- 選択して投稿する箇所
      this.input.onchange = async (e) => {
        var file = e.currentTarget.files[0];
        if (!file) return ;
        this._setFile(file);
        this.update();
      };

      // drag and drop対応
      this.root.ondragover = (e) => { return false; };
      this.root.ondrop = (e) => {
        var file = e.dataTransfer.files[0];
        if (!file) return ;
        
        //- jpeg, png, gif以外alert表示
        if (!this.validateFileImageOnly(file.type)) {
          e.preventDefault();
          spat.modal.alert('その形式のファイルは登録できません。');
          return;
        }

        this._setFile(file);
        return false;
      };
    });

    this.onSelectImage = async (e) => {
      e.preventDefault();
      //- options内、onclickの値が関数なら返り値を使う
      if (this.opts.field.options && typeof this.opts.field.options.onclick === 'function') {
        var url = await this.opts.field.options.onclick();
        if (url) {
          this.url = url;
          this.update();
        }
      }
      else {
        this.input.click();
      }
    };

    this._setFile = async (file) => {
      this.file = file;
      this.url = URL.createObjectURL(file);
      this.update();
    };

    this.getValue = async () => {
      if (!this.file) return opts.riotValue;

      let url = await app.admin.utils.uploadFile(this.file);

      return url;
    };

    //- image以外ならfalseを返す
    this.validateFileImageOnly = (type) => {
      var re = /(^image\/\w*)/;
      return re.test(type);
    };


//- サブコレクションを表示
admin-field-list
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  div.border
    div(ref='list', data-is='admin-module-list')

  script.
    this.on('mount', () => {
      this.refs.list.setup({
        path: `${this.opts.item.path}/${this.opts.field.key}`,
      });
    });

//- 配列
admin-field-array
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  div.mb8(ref='items')
    div.p8.border.rounded-4.mb8(each='{item, index in items}')
      div.f.fm
        div
          i.material-icons.mr4.handle.cursor-grab import_export
        div
          span.mr8 {index}.
        div.w-full.mr8(ref='fields', data-is='admin-field-{opts.field.options.field.type}', field='{opts.field.options.field}', value='{item}')
        button(type='button', onclick='{onDeleteItem}')
          i.material-icons.text-gray.fs18 delete

  div
    button.button(type='button', onclick='{onAdd}') 追加

  style(type='less').
    :scope {
      display: block;
      .cursor-grab {
        cursor: grab;
      }
    }

  script.
    this.on('mount', async () => {
      this.items = this.opts.riotValue || [];
      this.update();

      // ソート設定
      Sortable.create(this.refs.items, {
        animation: 150,
        handle: '.handle',
        onEnd: async (e) => {
          var items = await this.getValue();
          var temp = items.splice(e.oldIndex, 1)[0];
          items.splice(e.newIndex, 0, temp);

          //- DOMのindex番号が更新されないバグ回避で配列をリセットする
          this.items = [];
          this.update();

          this.items = items;
          this.update();
        },
      });
    });

    this.onAdd = async () => {
      this.items.push('');
      this.update();
    };

    this.onDeleteItem = async (e) => {
      var items = await this.getValue();
      items.splice(e.item.index, 1);

      this.items = [];
      this.update();

      this.items = items;
      this.update();
    };

    this.getValue = async () => {
      // 一個も設定していない場合を考慮
      if (!this.refs.fields) return [];

      // 配列じゃない場合を考慮
      var fields = Array.isArray(this.refs.fields) ? this.refs.fields : [this.refs.fields];

      // 非同期を考慮
      var promises = fields.map(async field => {
        return field.getValue();
      });

      // 結果を配列として取得
      var results = await Promise.all(promises);

      return results;
    };

//- コレクション選択フォーム
//- datalist 使ってたやつだけど微妙だったのでモーダル版を採用
admin-field-collection
  div.fs11.bold.text-gray.mb8(if='{opts.field.label}') {opts.field.label}
  div.f.fm.w-full
    div.f.fm.w-full.p8.border.rounded-4.mr8(if='{item}')
      div.w-full {getItemLabel(item)}
      button(type='button', onclick='{onDeleteItem}')
        i.material-icons.text-gray.fs18 delete
    div.flex-fixed
      button.button(type='button', onclick='{onOpenModal}') 設定

  style(type='less').
    :scope {
      display: block;
      .cursor-grab {
        cursor: grab;
      }
    }

  script.
    this.on('mount', async () => {
      this.item = null;
      if (this.opts.riotValue) {
        var item = await app.admin.crud.get({
          path: `${this.opts.field.options.collection}/${this.opts.riotValue}`
        });

        this.item = item;
      }
      this.update();
    });

    this.onOpenModal = async () => {
      var modal = spat.modal.open('admin-modal-collection', {
        options: this.opts.field.options,
      });

      var item = await modal.waitClose();

      if (item) {
        this.item = item;
        riot.update();
      }
    };

    this.getItemValue = (item) => {
      return admin.utils.$get(item, this.opts.field.options.value_key);
    };
    this.getItemLabel = (item) => {
      return admin.utils.$get(item, this.opts.field.options.label_key);
    };

    this.onDeleteItem = (e) => {
      this.item = null;
      this.update();
    };

    this.getValue = () => {
      return this.item ? this.getItemValue(this.item) : '';
    };

admin-field-button
  button.button(type='button', onclick='{onClick}') {this.opts.field.label}

  style(type='less').
    :scope {
      display: block;
      .cursor-grab {
        cursor: grab;
      }
    }

  script.
    this.onClick = (e) => {
      let onclick = this.opts.field.options.onclick;

      if (onclick) {
        onclick({
          tag: this,
          field: this.opts.field,
          item: this.opts.item,
        });
      }
    };

admin-field-object
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  div 
    div.mb8(each='{field, index in opts.field.options.fields}')
      div.w-full.mb8(ref='fields', data-is='admin-field-{field.type}', field='{field}', value='{admin.utils.$get(opts.riotValue, field.key)}')

  style(type='less').
    :scope {
      display: block;
    }

  script.
    this.on('mount', async () => {
    });

    this.getValue = async () => {
      var data = {};
      var fields = Array.isArray(this.refs.fields) ? this.refs.fields : [this.refs.fields];

      var promises = fields.map(async field => {
        if (!field.getValue) return ;

        var value = field.getValue();

        //- imageアップ時、プロミスで返ってくるのを対応
        if (value instanceof Promise) {
          value = await value;
        }

        admin.utils.$set(data, field.opts.field.key, value);
      });

      await Promise.all(promises);

      return data;
    };