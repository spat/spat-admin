admin-module-header
  div.bg-white.box-shadow.relative
    div.h60.f.fbw.fm.px16
      div.f.fm
        div.f.fm.item(each='{item in getBreadcrumbs()}')
          a.fs16.bold(if="{item.link}", href='{item.link}') {item.label}
          div.fs16.bold.text-gray(if="{!item.link}") {item.label}
          div.text-gray.arrow.mx8 >
      div.f.fm(if='{opts.list}')
        div.ml8(if='{canCreate()}')
          a.button.primary(href='/{opts.path}/new') NEW
      div.f.fm(if='{opts.form}')
        div.ml8(if='{canDelete()}')
          button.button.danger.py6(type='button', onclick='{onDelete}')
            i.fs18.material-icons delete
        div.ml8(if='{canUpdate()}')
          button.primary.button(onclick='{onSubmit}') SAVE

  style(type='less').
    :scope {
      display: block;

      .item:last-child .arrow {
        display: none;
      }
    }

  script.
    this.on('mount', () => {

    });

    this.getBreadcrumbs = () => {
      let items = [
        {
          label: 'TOP',
          link: '/',
        },
      ];

      //- 一覧ページ
      if (this.opts.list) {
        items.push({
          label: this.opts.list.schema.label,
          link: `/${opts.path}`,
        });
      }
      //- 詳細ページ
      else if (this.opts.form) {
        //- サブコレの場合
        if (this.opts.form.basename.includes('/')) {
          let paths = this.opts.form.basename.split('/');
          var link = ""
          var schema = app.admin.schema;
          //- コレクション名、idをセットで処理する
          for (var i = 0; i <= paths.length - 2; i += 2) {
            //- コレクション名
            schema = schema[paths[i]]
            var item = {label: schema.label}
            //- 一覧ページが存在すればリンク用意。それ以外はラベルのみ
            if (app.admin.menu[0].items.some(item => item.link === `/${paths[i]}`)) {
              link = `/${paths[i]}`
              item.link = link
              link += `/${paths[i+1]}`;
            } else {
              link += `/${paths[i]}/${paths[i+1]}`
            }
            //- 一覧リンク
            items.push(item);
            //- 詳細リンク
            items.push({
              label: `${paths[i+1]}`,
              link: link
            })
          }
          //- 表示する詳細ページのコレクション名
          items.push({
            label: this.opts.form.schema.label,
          });
        } 
        //- サブコレ以外の通常の場合
        else {
          items.push({
            label: this.opts.form.schema.label,
            link: `/${this.opts.form.collection}`,
          });
        }
        //- 全ページ共通 現在のページのリンク
        items.push({
          label: this.opts.form.id,
          link: `/${this.opts.form.path}`,
        });
      }
      return items;
    };

    // 最後のアイテムかどうかを判定
    this.isLast = (index) => {
      return this.opts.items.length-1 <= index;
    };

    this.onSubmit = () => {
      this.opts.form.submit();
    };

    this.onDelete = () => {
      this.opts.form.del();
    };

    this.canCreate = () => {
      return opts.list && opts.list.schema.crud && opts.list.schema.crud.create;
    };

    this.canUpdate = () => {
      return opts.form && opts.form.schema.crud && opts.form.schema.crud.update;
    };

    this.canDelete = () => {
      return opts.form && opts.form.schema.crud && opts.form.schema.crud.delete;
    };
