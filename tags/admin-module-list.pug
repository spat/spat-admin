//- 一覧用パーツ
admin-module-list
  div.h80.f.fbw.fm.p16.border-bottom(show='{schema.search !== false}')
    div.f.fm
      div.mr16(ref='filters', each='{filter in schema.filters}', data-is='admin-module-list-filter_', filter='{filter}', onchange='{onFilter}')
    form(onsubmit='{onSearch}')
      div.f
        input.input.mr8(ref='search', type='search', placeholder='Search')
        button.button 検索
  div.overflow-x-scroll
    table.w-full.w-full.border-spacing-0.border-collapse-collapse
      thead
        tr
          th.border-bottom(each='{heading in schema.headings}', style='min-width: {heading.width || "100px"}; width: {heading.width || "100%"}')
            div.w-full.text-left.fs11.text-gray.px12.py16.bold {heading.label}
      tbody
        tr.border-bottom.hover-trigger.hover-bg-dark.cursor-pointer(each='{item in items}', onclick='{onSelect}')
          td.p12(each='{heading in schema.headings}')
            div.fs13(data-is='admin-item-{heading.type}', value='{admin.utils.$get(item, heading.key)}', heading='{heading}', item='{item}')

    //-  もっと見る
    div.f.fh.py10(if='{next_cursor}')
      button.button(type='button', onclick='{fetch}') もっと見る

  style(type='less').
    :scope {
      display: block;
    }

  script.
    this.setup = async ({path}) => {
      this.reset();

      // schema を取得
      // collection もしくは collection/id に一致するスキーマ
      var schema_path = path.split('/').filter((path, index) => { return index%2 === 0; } ).join('.'); // id を取り除く
      var schema = admin.utils.$get(app.admin.schema, schema_path) || app.admin.schema[this.collection+'/'+this.id];
      this.schema = schema;

      this.path = path;

      await this.fetch();
    };

    this.reset = () => {
      this.items = [];
      this.next_cursor = '';
    };

    this.getList = () => {
      var list = Object.assign(app.admin);
    };

    this.onSelect = (e) => {
      // イベント発火
      this.trigger('select', {
        item: e.item.item,
      });

      const path = `/${this.path}/${e.item.item.id}`;
      if (e.ctrlKey || e.shiftKey || e.metaKey) {
        //- 別タブで開く
        window.open(path, '_blank');
      }
      else {
        //- 遷移
        spat.router.push(path);
      }
    };

    this.fetch = async () => {
      var keyword = this.refs.search.value;
      var filters = {};

      if (this.refs.filters) {
        var filters_tag = Array.isArray(this.refs.filters) ? this.refs.filters : [this.refs.filters];
        filters_tag.forEach(tag => {
          filters[tag.opts.filter.key] = tag.getValue();
        });
      }

      var {items, next_cursor} = await app.admin.crud.index({
        path: this.path,
        cursor: this.next_cursor,
        keyword,
        filters,
      });
      this.items.push(...items);
      this.next_cursor = next_cursor;
      this.update();
    };

    this.search = () => {
      // 検索するたびリセット
      this.reset();

      // fetch
      this.fetch();
    };

    this.onSearch = (e) => {
      e.preventDefault();
      //- TODO: 仕様決まったら合わせて対応
      if (this.refs.filters) {
        let filters = Array.isArray(this.refs.filters) ? this.refs.filters : [this.refs.filters];
        filters.forEach(filter => {
          filter.refs.filter.value = '----';
        });
      }
      this.update();
      
      this.search();
    };

    this.onFilter = (e) => {
      e.stopPropagation();
      //- TODO: 仕様決まったら合わせて対応
      if (this.refs.search) {
        this.refs.search.value = '';
      }
      this.update();
      
      this.search();
    };

admin-module-list-filter_
  div.text-center
    div.fs11.bold.mb4 {opts.filter.label}
    select.px8.py8.border.rounded-4(ref='filter', onchange='{opts.onchange}')
      option(value='----') ----
      option(each='{option in options}', value='{option.value}') {option.label}

  style(type='less').
    :scope {
      display: block;
    }
  
  script.
    this.on('mount', async () => {
      let options = opts.filter.options;

      // 関数だったら実行した返り値を使う
      if (typeof options === 'function') {
        options = options();

        // promise だったら待つ
        if (options instanceof Promise) {
          options = await options;
        }
      }

      this.update({
        options,
      });
    });

    this.getValue = () => {
      return this.refs.filter.value !== '----' ? this.refs.filter.value : '';
    };
