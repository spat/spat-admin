admin-field-text
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  input.input.w-full(ref='input', type='text', value='{opts.riotValue}', readonly='{opts.field.options.readonly}', class='{"bg-whitesmoke border-transparent": opts.field.options.readonly}')

  style(type='less').
    :scope {
      display: block;
    }
  
  script.
    this.getValue = () => {
      return this.refs.input.value;
    };

admin-field-textarea
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  textarea.input.w-full.lh15(ref='input', rows='{opts.field.rows || 4}', readonly='{opts.field.options.readonly}', class='{"bg-whitesmoke border-transparent": opts.field.options.readonly}') {opts.riotValue}

  style(type='less').
    :scope {
      display: block;
    }
  
  script.
    this.on('mount', () => {
      this.refs.input.ondragover = (e) => { return false; };
      this.refs.input.ondrop = async (e) => {
        e.preventDefault();

        var i = spat.modal.indicator();

        let file = e.dataTransfer.files[0];
        let {snapshot} = await app.utils.uploadFile(file);

        // imgix の url に変換
        let url = `${spat.config.imgix.domain}/${snapshot.ref.fullPath}?auto=format,compress`;

        this.insertText(`![](${url})\n`);

        i.close();
      };
    });

    this.insertText = (text) => {
      let input = this.refs.input;
      let cursorPosition = input.selectionStart;

      let before = input.value.substr(0, cursorPosition);
      let after = input.value.substr(cursorPosition);

      input.value = before + text + after;

      input.selectionStart = input.selectionEnd = cursorPosition + text.length;
    };

    this.getValue = () => {
      return this.refs.input.value;
    };

admin-field-date
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  input.input.w-full(ref='datetimepicker', required='{opts.option.required}', placeholder='{opts.field.options.placeholder}', readonly='{opts.field.options.readonly}', class='{"bg-whitesmoke border-transparent": opts.field.options.readonly}')

  style(type='less').
    :scope {
      display: block;
    }
  
  script.

    this.on('mount', () => {
      $(this.refs.datetimepicker).datetimepicker({});

      if (this.opts.riotValue) {
        var format = opts.field.options.format || 'YYYY/MM/DD HH:mm';
        this.refs.datetimepicker.value = dayjs(this.opts.riotValue).format(format);
      }

      this.update();
    });

    this.getValue = () => {
      var datetime = dayjs(this.refs.datetimepicker.value.valueOf());
      return +datetime;
    };

// TODO:
admin-field-markdown
  div markdown

  style(type='less').
    :scope {
      display: block;
    }

admin-field-select
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  select.select.px16.py12.pr40(ref='input')
    option(each='{choice in choices}', value='{choice.value}') {choice.label || choice.value}

  style(type='less').
    :scope {
      display: block;
    }

  script.
    this.on('mount', async () => {
      var choices = opts.field.options.choices;
      if (typeof choices === 'function') {
        choices = choices();
        if (choices instanceof Promise) {
          choices = await choices;
        }
      }
      this.update({choices});

      this.refs.input.value = this.opts.riotValue;
    });
    this.getValue = () => {
      return this.refs.input.value;
    };

admin-field-switch
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  //- div (スイッチフォーム)
  div.relative.switch.cursor-pointer.s-full.rounded-full.transition.f.fm.border(class='{"bg-primary checked": checked}', onclick='{toggle}')
    //- ○
    div.inner-button.flex-fixed.relative.ml3

  style(scoped, type='less').
    //- ボタンの大きさ指定の変数
    @width: 50px;
    @height: 27px;
    @border-width: 1px;
    @inner-button-size: 20px;
    //- 横幅からinner-buttonの高さを引いた分だけ動かすと綺麗に収まる
    :scope {
      display: block;
      
      .switch {
        width: @width;
        height: @height;
        cursor: pointer;
        -webkit-user-select: none;
        user-select: none;
        border-width: @border-width;

        &.checked {
          .inner-button {
            transform: translateX(@inner-button-size + 3);
          }
        }
      }
      //- switchのまるの部分
      .inner-button {
        width: @inner-button-size;
        height: @inner-button-size;
        transform: translateX(-@border-width);
        background-color: lightgray;
        border-radius: 50%;
        transition: 256ms;
      }
    }
  script.

    this.on('mount', () => {
      this.checked = this.opts.riotValue;
      this.update();
    });

    this.getValue = () => {
      return this.checked;
    };

    this.toggle = (e) => {
      this.checked = !this.checked;
    };

admin-field-image
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  div.bg-gray_pale.relative.w300.h200.border.rounded-4.cursor-pointer.mb4(onclick='{onSelectImage}')
    img.s-full.object-fit-contain(if="{url || opts.riotValue.url}", src='{url || opts.riotValue.url}')
    div.absolute.trbl0.s-full.f.fh.fs26 +
  div.fs10.mb16 クリック または ドラッグ&ドロップで追加できます
  
  style(type='less').
    :scope {
      display: block;
    }

  script.
    this.on('mount', () => {
      this.input = document.createElement('input');
      this.input.type = 'file';
      this.input.accept = 'image/*';
      
      //- 選択して投稿する箇所
      this.input.onchange = async (e) => {
        var file = e.currentTarget.files[0];
        if (!file) return ;
        this._setFile(file);
        this.update();
      };

      // drag and drop対応
      this.root.ondragover = (e) => { return false; };
      this.root.ondrop = (e) => {
        var file = e.dataTransfer.files[0];
        if (!file) return ;
        
        //- jpeg, png, gif以外alert表示
        if (!this.validateFileImageOnly(file.type)) {
          e.preventDefault();
          spat.modal.alert('その形式のファイルは登録できません。');
          return;
        }

        this._setFile(file);
        return false;
      };
    });

    this.onSelectImage = (e) => {
      e.preventDefault();
      this.input.click();
    };

    this._setFile = async (file) => {
      this.file = file;
      this.url = URL.createObjectURL(file);
      this.update();
    };

    this.getValue = async () => {
      if (!this.file) return;

      var {url} = await app.utils.uploadFile(this.file);
      return {
        url,
      }
    };

    //- image以外ならfalseを返す
    this.validateFileImageOnly = (type) => {
      var re = /(^image\/\w*)/;
      return re.test(type);
    };


//- サブコレクションを表示
admin-field-list
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  div.border
    div(ref='list', data-is='admin-module-list')

  script.
    this.on('mount', () => {
      this.refs.list.setup({
        path: `${this.opts.item.path}/${this.opts.field.key}`,
      });
    });


//- コレクション選択フォーム(old)
//- datalist 使ってたやつだけど微妙だったのでモーダル版を採用
//- admin-field-collection
//-   div.fs11.bold.text-gray.mb8 {opts.field.label}
//-   form.f.fm.mb8(onsubmit='{submit}')
//-     input.input.w50per.mr4(ref='input', type='text', list='{opts.field.label}', oninput='{debouncedSyncCandidates}', onselect='{hoge}')
//-     //- button.button 追加
//-   div
//-     div.p6.border.rounded-4.mb4(each='{item, index in items}')
//-       div.f.relative
//-         span {index}. {getItemLabel(item)}

//-   datalist(id='{opts.field.label}')
//-     option(each='{item in candidates}', value='{getItemValue(item)}') {getItemLabel(item)}

//-   script.

//-     this.on('mount', async () => {
//-       this.value = opts.riotValue;

//-       this.syncCandidates();

//-       // 個別記事を取得する
//-       var promises = opts.riotValue.map(async id => {
//-         return app.admin.crud.get({
//-           path: `${this.opts.field.options.collection}/${id}`
//-         });
//-       });

//-       this.items = await Promise.all(promises);
//-       this.update();
//-     });

//-     this.submit = (e) => {
//-       e.stopPropagation();
//-       e.preventDefault();
//-     };

//-     // 候補一覧を更新
//-     this.syncCandidates = async () => {
//-       this.candidates = await app.admin.crud.index({
//-         path: `${this.opts.field.options.collection}`,
//-         keyword: this.refs.input.value,
//-       });
//-       this.update();
//-     };

//-     this.debouncedSyncCandidates = _.debounce((e) => {
//-       // 入力内容とヒットする item を探す
//-       var item = this.candidates.find(item => this.getItemValue(item) === e.target.value);

//-       if (item) {
//-         this.items.push(item);
//-         e.target.value = '';
//-         this.update();
//-       }
//-       else {
//-         this.syncCandidates();
//-       }
//-     }, 100);

//-     this.getItemValue = (item) => {
//-       return admin.utils.$get(item, this.opts.field.options.value_key);
//-     };
//-     this.getItemLabel = (item) => {
//-       return admin.utils.$get(item, this.opts.field.options.label_key);
//-     };

//-     this.getValue = () => {
//-       var values = this.items.map(item => this.getItemValue(item));
//-       return values;
//-     };


//- コレクション選択フォーム(old)
//- datalist 使ってたやつだけど微妙だったのでモーダル版を採用
admin-field-collection
  div.fs11.bold.text-gray.mb8 {opts.field.label}
  div.mb8(ref='items')
    div.p8.border.rounded-4.mb4(each='{item, index in items}')
      div.f.fm.fbw
        div.f.fm
          i.material-icons.mr4.handle.cursor-grab import_export
          span {index}. {getItemLabel(item)}
        button(type='button', onclick='{onDeleteItem}')
          i.material-icons.text-gray.fs18 delete
  div
    button.button(type='button', onclick='{onOpenModal}') {isMultiple() ? '追加' : '設定'}


  style(type='less').
    :scope {
      display: block;
      .cursor-grab {
        cursor: grab;
      }
    }

  script.

    this.on('mount', async () => {
      // 複数選択
      if (this.isMultiple()) {
        // 個別にデータを取得する
        var promises = (opts.riotValue || []).map(async key => {
          return app.admin.crud.get({
            path: `${this.opts.field.options.collection}/${key}`
          });
        });
        this.items = await Promise.all(promises);
        this.update();

        // ソート設定
        Sortable.create(this.refs.items, {
          animation: 150,
          handle: '.handle',
          onEnd: async (e) => {
            var items = this.items;
            var temp = items.splice(e.oldIndex, 1)[0];
            items.splice(e.newIndex, 0, temp);
            this.update();
          },
        });
      }
      // 単体選択
      else {
        this.items = [];
        if (this.opts.riotValue) {
          var item = await app.admin.crud.get({
            path: `${this.opts.field.options.collection}/${this.opts.riotValue}`
          });

          this.items.push(item);
        }
        this.update();
      }
    });

    this.onOpenModal = async () => {
      var modal = spat.modal.open('admin-modal-collection', {
        options: this.opts.field.options,
      });

      var item = await modal.waitClose();

      if (item) {
        // 複数選択
        if (this.isMultiple()) {
          this.items.push(item);
        }
        // 単体選択
        else {
          this.items[0] = item;
        }
        riot.update();
      }
    };

    this.getItemValue = (item) => {
      return admin.utils.$get(item, this.opts.field.options.value_key);
    };
    this.getItemLabel = (item) => {
      return admin.utils.$get(item, this.opts.field.options.label_key);
    };

    this.onDeleteItem = (e) => {
      this.items = this.items.filter(item => item !== e.item.item);
      this.update();
    };

    this.getValue = () => {
      if (this.isMultiple()) {
        var values = this.items.map(item => this.getItemValue(item));
        return values;
      }
      else {
        return this.getItemValue(this.items[0]);
      }
    };

    this.isMultiple = () => {
      return this.opts.field.options.multiple;
    };
