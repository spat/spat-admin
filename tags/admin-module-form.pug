admin-module-form
  form#form1.row.mxn16(if='{visible}', ref='form', onsubmit='{onSubmit}')
    div.mb32.s-w-full(each='{form in schema.forms}', class='{form.class}')
      div.box-shadow.rounded-4.bg-white.p32.mx16
        div.mb16
          div.fs18.bold.mb8 {form.label}
          div.h2.w-full.bg-primary
        div.row
          div.block.w-full.mb32(each='{field in form.fields}',if='{isVisibleField(field)}',  class='{field.class}')
            div(ref='fields', data-is='admin-field-{field.type}', field='{field}', value='{admin.utils.$get(item, field.key)}', item='{item}')

    //- 外から submit できるようにするためのボタン
    button.hide(ref='btn') submit

  style(type='less').
    :scope {
      display: block;
    }
  
  script.
    this.visible = true;

    this.setup = async ({path}) => {
      // フルパス
      this.path = path;
      // ID
      this.id = app.utils.path.basename(path);
      // ディレクトリ
      this.basename = app.utils.path.dirname(path);
      // コレクション名
      this.collection = this.basename.split('/').pop();
      
      this.reset();

      if (this.id !== 'new') {
        var item = await app.admin.crud.get({
          path: path,
        });

        this.item = item;
      }

      // schema を取得
      // collection もしくは collection/id に一致するスキーマ
      var schema_path = path.split('/').filter((path, index) => { return index%2 === 0; } ).join('.'); // id を取り除く
      var schema = admin.utils.$get(app.admin.schema, schema_path) || app.admin.schema[this.collection+'/'+this.id];
      this.schema = schema;

      this.update();
    };

    this.reset = () => {
      // form を非表示/表示することで内容をリセット
      this.update({visible: false});
      this.update({visible: true});
    };

    this.submit = () => {
      this.refs.btn.click();
    };

    this.onSubmit = (e) => {
      e.preventDefault();

      this.save();
    };

    this.save = async () => {
      var data = {};

      var fields = Array.isArray(this.refs.fields) ? this.refs.fields : [this.refs.fields];

      var promises = fields.map(async field => {
        if (!field.getValue) return ;

        var value = field.getValue();

        //- imageアップ時、プロミスで返ってくるのを対応
        if (value instanceof Promise) {
          value = await value;
        }

        admin.utils.$set(data, field.opts.field.key, value);
      });

      await Promise.all(promises);

      if (!this.item) {
        var item = await app.admin.crud.post({
          path: this.collection,
          data,
        });

        this.trigger('create', {
          item,
        });
        this.opts.oncreate && this.opts.oncreate({
          item,
        });
        spat.router.replace(`/${item.path}`);
      }
      else {
        var item = await app.admin.crud.put({
          path: this.path,
          data,
        });

        this.item = item;
        this.trigger('save', {
          item,
        });
      }
      

      this.update();

      spat.toast.message('保存しました!');
    };

    this.del = async () => {
      let result = await spat.modal.confirm('本当に削除しますか？');

      if (!result) return ;

      // 削除
      await app.admin.crud.del({
        path: this.path,
      });

      spat.toast.message('削除しました!');

      spat.router.replace(`/${this.collection}`);
    };

    //- fieldを表示するかどうか
    this.isVisibleField = (field) => {
      if (typeof field.options.visible !== 'function') return true;
      return field.options.visible({
        item: this.item,
        field,
      });
    };


